// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelo principal para los clientes
model Client {
  id                    String    @id @default(uuid())
  company_name          String
  legal_id              String?   @unique
  employees             Int?
  geographic_location   String?
  website               String?
  phone                 String?
  email                 String?
  mission               String?   @db.Text
  vision                String?   @db.Text
  organizational_values String?   @db.Text
  
  // Campos de negocio
  niche                 String?
  services              String?   @db.Text
  opportunities         String?   @db.Text
  budget                String?
  authority             String?
  buyer                 String?
  needs                 String?   @db.Text
  timeline              String?
  metrics               String?   @db.Text
  decision_criteria     String?
  decision_process      String?   @db.Text
  pain_points           String?   @db.Text
  champion              String?
  objectives            String?   @db.Text
  consequences          String?   @db.Text
  
  // Checklist items
  has_website                    Boolean @default(false)
  has_phone                      Boolean @default(false)
  has_email                      Boolean @default(false)
  has_more_than_50_employees     Boolean @default(false)
  has_established_brand          Boolean @default(false)
  has_digital_presence           Boolean @default(false)
  has_growth_potential           Boolean @default(false)
  has_decision_maker_access      Boolean @default(false)
  has_budget_authority           Boolean @default(false)
  has_clear_pain_points          Boolean @default(false)
  has_defined_needs              Boolean @default(false)
  has_timeline_urgency           Boolean @default(false)
  has_previous_tech_investments  Boolean @default(false)
  has_internal_champion          Boolean @default(false)
  
  // Puntuación
  total_score           Int       @default(0)
  percentage            Int       @default(0)
  evaluation_status     EvaluationStatus @default(NOT_SUITABLE)
  
  // Metadatos
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  // Relaciones
  contacts              Contact[]
  evaluations           Evaluation[]
  
  @@index([company_name])
  @@index([evaluation_status])
}

// Modelo para los contactos
model Contact {
  id            String    @id @default(uuid())
  client_id     String
  contact_type  ContactType
  position      String?
  name          String?
  phone         String?
  extension     String?
  email         String?
  
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relación
  client        Client    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  
  @@index([client_id])
}

// Modelo para historial de evaluaciones
model Evaluation {
  id            String    @id @default(uuid())
  client_id     String
  score         Int
  percentage    Int
  status        EvaluationStatus
  notes         String?   @db.Text
  evaluated_by  String?   // ID del usuario que hizo la evaluación
  
  created_at    DateTime  @default(now())
  
  // Relación
  client        Client    @relation(fields: [client_id], references: [id], onDelete: Cascade)
  
  @@index([client_id])
  @@index([created_at])
}

// Enums
enum ContactType {
  direcciones
  consejo
  comite
  otros
}

enum EvaluationStatus {
  SUITABLE          // Apto (≥80%)
  POTENTIAL         // Potencial (60-79%)
  NOT_SUITABLE      // No Apto (<60%)
}